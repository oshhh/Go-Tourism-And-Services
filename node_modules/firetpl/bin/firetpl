#!/usr/bin/env node
/*global XQCore:true */
var fs = require('fs'),
    path = require('path');

var mkdirp = require('mkdirp'),
    program = require('commander'),
    pkg = require('../package.json');

var FireTPL = require('../firetpl-node');

program.version(pkg.version)
    .usage('[options] <file ...>')
    .option('-o, --out <outfile>', 'Write precompiled file to <outfile>. If this option is not present write to STDOUT')
    .option('-a, --amd', 'Precompile as an AMD module.')
    .option('-c, --commonjs', 'Precompile as CommonJS module.')
    .option('-f, --firetpl-module <name>', 'Set the name of FireTPL module for AMD and CommonJS ( var FireTPL = require(\'myFireTPLModule\'))')
    .option('-m, --module-name <name>', 'Set the name of the AMD module ( define(\'myname\', [\'firetpl\'] ... ); )')
    .option('-s, --no-scope', 'Don\'t wrap a scope function. (Ignored if the AMD or CommonJS option is set)')
    .option('-d, --debug', 'Enable debug mode')
    .option('-p, --pretty', 'Prettify output')
    .option('-s, --scopeTags', 'Insert scope tags')
    .option('-i, --file <src>', 'Read from file <src>')
    .option('-r, --root <dir>', 'Defines a root dir. Defaults to current working dir')
    .option('-v, --verbose', 'Print more infos')
    .parse(process.argv);

var src = program.args,
    tplName = program.sname || path.basename(src, path.extname(src));

//Set debug mode
FireTPL.debug = !!program.debug;

if (program.verbose) {
    console.log('Precompile ');
    console.log('---------- files ----------');
    console.log(program.args.join('\n'));
    console.log('---------- end of source file ----------');
    console.log('len: ', program.args.length, 'files');
    console.log('');
    console.log('');
}

if (typeof src === 'string') {
    src = [src];
}

var baseDir = program.root || process.cwd();
src = src.map(function(file) {
    return {
        file: path.join(process.cwd(), file),
        name: path.relative(baseDir, file).replace(/\.(fire|hbs)$/, '')
    };
});

var precompiled = FireTPL.precompileAll(src, {
    moduleName: program.moduleName,
    firetplModule: program.firetplModule,
    amd: program.amd,
    commonjs: program.commonjs,
    scope: program.scope,
    scopeTags: program.scopeTags,
    verbose: program.verbose
});

var beforeOut = function(str) {
    if (!program.pretty) {
        return str;
    }

    var indention = 0,
        out = '';

    var repeat = function(str, i) {
        var out = '';
        while (i > 0) {
            out += str;
            i--;
        }
        return out;
    };

    for (var i = 0; i < str.length; i++) {
        var c = str.charAt(i);
        
        if(c === '}' && str.charAt(i - 1) !== '{') {
            indention--;
            out += '\n' + repeat('\t', indention);
        }

        out += c;

        if (c === '{' && str.charAt(i + 1) !== '}') {
            indention++;
            out += '\n' + repeat('\t', indention);
        }
        else if(c === ';') {
            out += '\n' + repeat('\t', indention);
        }
    }

    return out;
};

if (program.out) {
    console.log('Write to', program.out);
    var dir = path.dirname(program.out);
    if (dir) {
        mkdirp.sync(dir, {
            mode: 0755
        });
    }
    fs.writeFileSync(program.out, beforeOut(precompiled), {
        mode: 0644,
        flag: 'w'
    });
} else {
    console.log(beforeOut(precompiled));
}