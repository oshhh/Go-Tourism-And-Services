#!/usr/bin/env node
/*global XQCore:true */
var fs = require('fs'),
    path = require('path');

var program = require('commander'),
    grunt = require('grunt'),
    pkg = require('../package.json');

var FireTPL = require('../firetpl');

program.version(pkg.version)
    .description('Parse a locale dir (i18n support)')
    .usage('[options] <inputFiles>')
    .option('-o, --out <outfile>', 'Write precompiled file to <outfile>')
    .option('-v, --verbose', 'Print more infos')
    .parse(process.argv);

if (program.args.length) {
    var parser = new FireTPL.I18nParser();

    var isDir = function(file) {
        return grunt.file.isDir(file);
    };

    var allFiles = [];
    if (program.args.every(isDir)) {
        program.args.forEach(function(file) {
            grunt.file.recurse(file, function(abspath, rootdir, subdir, filename) {
                if (grunt.file.isFile(abspath)) {
                    allFiles.push(abspath);
                }
            });
        });
    }
    else {
        allFiles = program.args;
    }

    allFiles = grunt.file.expand(allFiles);

    allFiles.forEach(function(file) {
        var filepath = path.join(process.cwd(), file);
        if (grunt.file.isFile(filepath)) {
            var fileSplit = path.basename(file).match(/^(?:(.+)\.)?([a-zA-Z_-]+)\.(json|fire)$/);
            if (path.extname(file) === '.fire') {
                parser.addItem(fileSplit[2], fileSplit[1], FireTPL.fire2html(grunt.file.read(filepath)));
            }
            else if (Array.isArray(fileSplit) && fileSplit[2]) {
                var langConf = require(filepath);
                parser.add(fileSplit, langConf);
            }
        }
    });
}


if (program.out) {
    var outFile = program.out;

    if (program.verbose) {
        console.log('\nWrite locales to %s', outFile);
    }

    grunt.file.write(outFile, parser.parse());
}
else {
    console.log(parser.parse());
}
